1. vector добаление в конец о(1) амортизированное, динамически меняет размер, по умолчанию
2. string не совсем контейнер
3. array как вектор но статическиий, фиксированный размер, на стеке
4. deque как вектор, но добавление за o(1) и в конец, и в начало

объект - сущность обладающая поведением и состоянием

vector<T*>
size <= capacity
push_back()
resize()
deque: push_front

Узловые контейнеры
    1) добавление за о(1)
    2) перемещение элементов
    3) деление листка на части
list, forward_list
сортиовка всегда n*log(n) без расхода памяти
sort = merge + insertion
методы:
    1) .splice() перемещение элементов
    2) .merge(...) слияние остортированных
    3) .sort()

Ассоциативные контйнеры
map, set
1.1) set
    уникальные отсортированные элементы
    добавление, поиск o(log(n))
1.2) multiset
    без уникальности
1.3) unordered_set - уникальные, не отсортированые
    добавление поиск за о(1)
1.4) unordered_multiset - не уникальные, не отсортированые
2) map(multimap, unordred_map, unordred_multimap) -
    ключ,значение, для ключей свойства set
    элементы - pair

multimap
.equal_range()
.lower_bound()
.upper_bound()
