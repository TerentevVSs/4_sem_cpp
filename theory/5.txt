1. параллелизм:
    процессы - свои память и данные
1 процесс - 1 ядро в 1 момент времени
    обычно процессов больше чем ядер
    => переключение контекста
dt ~ 4-6 мкс

2. потоки - как процессы, но делят память с другими потоками
    быстрее
    дешевле
    менее безопасно
1 процесс - 1 или более потоков

2.1 thread - 1 поток
    получает функцию и автономно ее выполняет
    если не закончит раньш родителя - умрет
    => можно его подождать
    нельзя получить результат
    проблема: общие ресурсы
2.2 future - контракт на выполненеие функции
    получает функцию
    можно потребовать в любой момент
    могут начать работать в последний момент
    => можно требовать немедленного начала
    можно получить результат

передача: имя функции, затем аргументы
передача ссылок
передача методов классов

this - неявный первый аргумент


перед распараллеливанием
нужно ли
можно ли

accumulate
проанализируем размер
узнаем количество исполнителей
распреелим данные по исполнителям
запустим исполнение
соберем результат

